; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

@.str = private unnamed_addr constant [59 x i8] c"Message from imbedded function: Binary Operator     (BB) \0A\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"Message from imbedded function: Allocation          (BB)\0A\00", align 1
@.str.2 = private unnamed_addr constant [58 x i8] c"Message from imbedded function: Branch Instruction  (BB)\0A\00", align 1
@.str.3 = private unnamed_addr constant [58 x i8] c"Message from imbedded function: Load                (BB)\0A\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"Message from imbedded function: Store               (BB)\0A\00", align 1
@.str.5 = private unnamed_addr constant [58 x i8] c"Message from imbedded function: Call Instruction    (BB)\0A\00", align 1
@.str.6 = private unnamed_addr constant [58 x i8] c"Message from imbedded function: Instruction         (BB)\0A\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"\0ATarget Program: Hello Begin llvm test program\0A \0A\00", align 1
@.str.1.8 = private unnamed_addr constant [61 x i8] c"\0ATarget Program: Defined some ints and did some addition.\0A \0A\00", align 1
@.str.2.9 = private unnamed_addr constant [39 x i8] c"\0ATarget Program: Called a function.\0A \0A\00", align 1
@.str.3.10 = private unnamed_addr constant [32 x i8] c"\0ATarget Program: At the end.\0A \0A\00", align 1
@.str.5.11 = private unnamed_addr constant [68 x i8] c"\0ATarget Program: This function is run every iteration of a loop.\0A \0A\00", align 1
@.str.4.12 = private unnamed_addr constant [67 x i8] c"\0ATarget Program: At the end of function is run before the loop.\0A \0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define void @BO() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind ssp uwtable
define void @ALL() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @BRAN() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @LOAD() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @STORE() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @CALL() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @INST() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca i32, align 4
  %test2 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i32 0, i32 0))
  store i32 4, i32* %test, align 4
  store i32 4, i32* %test2, align 4
  %0 = load i32, i32* %test, align 4
  %1 = load i32, i32* %test2, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, i32* %test, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1.8, i32 0, i32 0))
  call void @foo()
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2.9, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %test, align 4
  %cmp = icmp sge i32 %2, 1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %test, align 4
  %sub = sub nsw i32 %3, 1
  store i32 %sub, i32* %test, align 4
  call void @bar()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3.10, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define void @foo() #0 {
entry:
  %temp = alloca i32, align 4
  %temp2 = alloca i32, align 4
  store i32 1, i32* %temp, align 4
  store i32 2, i32* %temp2, align 4
  %0 = load i32, i32* %temp, align 4
  %1 = load i32, i32* %temp2, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, i32* %temp, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.4.12, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @bar() #0 {
entry:
  %temp = alloca i32, align 4
  %temp2 = alloca i32, align 4
  store i32 1, i32* %temp, align 4
  store i32 2, i32* %temp2, align 4
  %0 = load i32, i32* %temp, align 4
  %1 = load i32, i32* %temp2, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, i32* %temp, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5.11, i32 0, i32 0))
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 4.0.0 (trunk 283174) (llvm/trunk 283173)"}
!1 = !{i32 1, !"PIC Level", i32 2}
